
Intervalometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000003be  00000452  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800078  00800078  0000046a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  0000049a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000099f  00000000  00000000  0000054a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003c5  00000000  00000000  00000ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b29  00000000  00000000  000012ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00001dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000648d  00000000  00000000  00001f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d6  00000000  00000000  000083d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000086af  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000014c0  00000000  00000000  0000872f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	19 c1       	rjmp	.+562    	; 0x250 <__vector_7>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	99 c1       	rjmp	.+818    	; 0x368 <__vector_13>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 38       	cpi	r26, 0x89	; 137
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	8d d0       	rcall	.+282    	; 0x1a2 <main>
  88:	98 c1       	rjmp	.+816    	; 0x3ba <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <LCDToggleEnable>:
	_delay_us(50);
}

void LCDToggleEnable()
{
	LCDCONTROL |= 1<<ENABLE;
  8c:	95 9a       	sbi	0x12, 5	; 18
	...
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
  96:	00 00       	nop
	LCDCONTROL &= ~(1<<ENABLE);
  98:	95 98       	cbi	0x12, 5	; 18
  9a:	08 95       	ret

0000009c <LCDWaitWhileBusy>:
	_delay_us(50);
}

void LCDWaitWhileBusy()
{
	LCDDATADIR = 0;
  9c:	14 ba       	out	0x14, r1	; 20
	LCDCONTROL |= 1<<READWRITE;
  9e:	92 9a       	sbi	0x12, 2	; 18
	LCDCONTROL &= ~(1<<REGSEL);
  a0:	96 98       	cbi	0x12, 6	; 18

	while(LCDDATA >= 0x80)
  a2:	af 9b       	sbis	0x15, 7	; 21
  a4:	03 c0       	rjmp	.+6      	; 0xac <LCDWaitWhileBusy+0x10>
	{
		LCDToggleEnable();
  a6:	f2 df       	rcall	.-28     	; 0x8c <LCDToggleEnable>
{
	LCDDATADIR = 0;
	LCDCONTROL |= 1<<READWRITE;
	LCDCONTROL &= ~(1<<REGSEL);

	while(LCDDATA >= 0x80)
  a8:	af 99       	sbic	0x15, 7	; 21
  aa:	fd cf       	rjmp	.-6      	; 0xa6 <LCDWaitWhileBusy+0xa>
	{
		LCDToggleEnable();
	}
	LCDDATADIR = 0xff;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	84 bb       	out	0x14, r24	; 20
	LCDCONTROL &= ~(1<<READWRITE);
  b0:	92 98       	cbi	0x12, 2	; 18
  b2:	08 95       	ret

000000b4 <LCDSendCommand>:
	LCDSendCommand(0b00001110); // Display ON/OFF
	_delay_us(50);
}

void LCDSendCommand(unsigned char command)
{
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
	LCDWaitWhileBusy();
  b8:	f1 df       	rcall	.-30     	; 0x9c <LCDWaitWhileBusy>
	LCDCONTROL &= ~(1<<REGSEL);
  ba:	96 98       	cbi	0x12, 6	; 18
	asm volatile ("nop");
  bc:	00 00       	nop
	asm volatile ("nop");
  be:	00 00       	nop
	LCDDATA = command;
  c0:	c5 bb       	out	0x15, r28	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	87 ec       	ldi	r24, 0xC7	; 199
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <LCDSendCommand+0x12>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <LCDSendCommand+0x18>
  cc:	00 00       	nop
	_delay_us(50);
	LCDToggleEnable();
  ce:	de df       	rcall	.-68     	; 0x8c <LCDToggleEnable>
	LCDDATA = 0;
  d0:	15 ba       	out	0x15, r1	; 21
  d2:	87 ec       	ldi	r24, 0xC7	; 199
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LCDSendCommand+0x22>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LCDSendCommand+0x28>
  dc:	00 00       	nop
	_delay_us(50);
}
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <LCDInit>:
#define ENABLE PORTD5 // LCD Enable.
#define REGSEL PORTD6 // LCD Register select. 0 = command

void LCDInit()
{	// Configure LCD
	LCDDATADIR = 0xFF;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	84 bb       	out	0x14, r24	; 20
	LCDCONTROLDIR |= (1<<ENABLE | 1<<REGSEL | 1<<READWRITE);
  e6:	81 b3       	in	r24, 0x11	; 17
  e8:	84 66       	ori	r24, 0x64	; 100
  ea:	81 bb       	out	0x11, r24	; 17
	LCDCONTROL &= ~(1<<READWRITE);
  ec:	92 98       	cbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	80 e7       	ldi	r24, 0x70	; 112
  f2:	92 e0       	ldi	r25, 0x02	; 2
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <LCDInit+0x12>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCDInit+0x1c>
  fe:	00 00       	nop
	_delay_ms(50);
	LCDSendCommand(0x1);  // Home
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	d8 df       	rcall	.-80     	; 0xb4 <LCDSendCommand>
 104:	8f e3       	ldi	r24, 0x3F	; 63
 106:	9f e1       	ldi	r25, 0x1F	; 31
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCDInit+0x26>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCDInit+0x2c>
 10e:	00 00       	nop
	_delay_ms(2);
	LCDSendCommand(0x38); // 8-bit commands
 110:	88 e3       	ldi	r24, 0x38	; 56
 112:	d0 df       	rcall	.-96     	; 0xb4 <LCDSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	87 ec       	ldi	r24, 0xC7	; 199
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCDInit+0x36>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <LCDInit+0x3c>
 11e:	00 00       	nop
	_delay_us(50);
	LCDSendCommand(0b00001110); // Display ON/OFF
 120:	8e e0       	ldi	r24, 0x0E	; 14
 122:	c8 df       	rcall	.-112    	; 0xb4 <LCDSendCommand>
 124:	87 ec       	ldi	r24, 0xC7	; 199
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCDInit+0x46>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCDInit+0x4c>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <LCDSetPos>:
		LCDSendChar(*text++);
	}
}

void LCDSetPos(unsigned char row, unsigned char col)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	00 d0       	rcall	.+0      	; 0x138 <LCDSetPos+0x6>
 138:	00 d0       	rcall	.+0      	; 0x13a <LCDSetPos+0x8>
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
	unsigned char rowaddr[] = {0, 64, 20, 84};
 13e:	19 82       	std	Y+1, r1	; 0x01
 140:	90 e4       	ldi	r25, 0x40	; 64
 142:	9a 83       	std	Y+2, r25	; 0x02
 144:	94 e1       	ldi	r25, 0x14	; 20
 146:	9b 83       	std	Y+3, r25	; 0x03
 148:	94 e5       	ldi	r25, 0x54	; 84
 14a:	9c 83       	std	Y+4, r25	; 0x04
	int pos = rowaddr[row] + col;
 14c:	fe 01       	movw	r30, r28
 14e:	e8 0f       	add	r30, r24
 150:	f1 1d       	adc	r31, r1
 152:	81 81       	ldd	r24, Z+1	; 0x01
 154:	86 0f       	add	r24, r22
	LCDSendCommand(0x80 + pos);
 156:	80 58       	subi	r24, 0x80	; 128
 158:	ad df       	rcall	.-166    	; 0xb4 <LCDSendCommand>
 15a:	87 ec       	ldi	r24, 0xC7	; 199
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <LCDSetPos+0x2c>
 162:	00 c0       	rjmp	.+0      	; 0x164 <LCDSetPos+0x32>
 164:	00 00       	nop
	_delay_us(50);
}
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <LCDSendChar>:
	LCDDATA = 0;
	_delay_us(50);
}

void LCDSendChar(unsigned char character)
{
 174:	cf 93       	push	r28
 176:	c8 2f       	mov	r28, r24
	LCDWaitWhileBusy();
 178:	91 df       	rcall	.-222    	; 0x9c <LCDWaitWhileBusy>
	LCDCONTROL |= 1<<REGSEL;
 17a:	96 9a       	sbi	0x12, 6	; 18
	asm volatile ("nop");
 17c:	00 00       	nop
	asm volatile ("nop");
 17e:	00 00       	nop
	LCDDATA = character;
 180:	c5 bb       	out	0x15, r28	; 21
 182:	87 ec       	ldi	r24, 0xC7	; 199
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCDSendChar+0x12>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCDSendChar+0x18>
 18c:	00 00       	nop
	_delay_us(50);
	LCDToggleEnable();
 18e:	7e df       	rcall	.-260    	; 0x8c <LCDToggleEnable>
	LCDDATA = 0;
 190:	15 ba       	out	0x15, r1	; 21
 192:	87 ec       	ldi	r24, 0xC7	; 199
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <LCDSendChar+0x22>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <LCDSendChar+0x28>
 19c:	00 00       	nop
	_delay_us(50);
}
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <main>:
volatile flagstates dnflag = OFF;


int main(void)
{
	MCUCSR = (1<<JTD); // Disable JTAG
 1a2:	80 e8       	ldi	r24, 0x80	; 128
 1a4:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1<<JTD); // Disable JTAG (yes, 2 are required)
 1a6:	84 bf       	out	0x34, r24	; 52

	// Configure serial
	UBRRH = (uint8_t)(UBRR>>8);
 1a8:	10 bc       	out	0x20, r1	; 32
	UBRRL = (uint8_t)(UBRR);
 1aa:	89 e1       	ldi	r24, 0x19	; 25
 1ac:	89 b9       	out	0x09, r24	; 9
	UCSRB |= (1<<TXEN) | (1<<RXEN) | (1<<RXCIE);
 1ae:	8a b1       	in	r24, 0x0a	; 10
 1b0:	88 69       	ori	r24, 0x98	; 152
 1b2:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
 1b4:	80 b5       	in	r24, 0x20	; 32
 1b6:	86 68       	ori	r24, 0x86	; 134
 1b8:	80 bd       	out	0x20, r24	; 32

	// Set up buttons
	DDRB &= ~(1<<ENTER | 1<<CANCEL | 1<<UP | 1<<DN);
 1ba:	87 b3       	in	r24, 0x17	; 23
 1bc:	80 7f       	andi	r24, 0xF0	; 240
 1be:	87 bb       	out	0x17, r24	; 23
	PORTB |= 0xF; // Configure ports 0-3 as inputs with pull-ups
 1c0:	88 b3       	in	r24, 0x18	; 24
 1c2:	8f 60       	ori	r24, 0x0F	; 15
 1c4:	88 bb       	out	0x18, r24	; 24

	// Timer interrupt, 1mS
	TCCR1B |= (1<<CS11) | (1<<CS10) | (1<<WGM12);
 1c6:	8e b5       	in	r24, 0x2e	; 46
 1c8:	8b 60       	ori	r24, 0x0B	; 11
 1ca:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 250; // 1000Hz (1mS) with div by 64
 1cc:	8a ef       	ldi	r24, 0xFA	; 250
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	9b bd       	out	0x2b, r25	; 43
 1d2:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= 1<<OCIE1A;
 1d4:	89 b7       	in	r24, 0x39	; 57
 1d6:	80 61       	ori	r24, 0x10	; 16
 1d8:	89 bf       	out	0x39, r24	; 57
	sei();
 1da:	78 94       	sei

	DDRD |= 1<<PIND7;
 1dc:	8f 9a       	sbi	0x11, 7	; 17
	LCDInit();
 1de:	81 df       	rcall	.-254    	; 0xe2 <LCDInit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e0:	2f ef       	ldi	r18, 0xFF	; 255
 1e2:	89 e6       	ldi	r24, 0x69	; 105
 1e4:	98 e1       	ldi	r25, 0x18	; 24
 1e6:	21 50       	subi	r18, 0x01	; 1
 1e8:	80 40       	sbci	r24, 0x00	; 0
 1ea:	90 40       	sbci	r25, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <main+0x44>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <main+0x4e>
 1f0:	00 00       	nop
	

	while(1)
	{
		_delay_ms(500);
		if (rxflag)
 1f2:	80 91 7e 00 	lds	r24, 0x007E
 1f6:	90 91 7f 00 	lds	r25, 0x007F
 1fa:	89 2b       	or	r24, r25
 1fc:	31 f0       	breq	.+12     	; 0x20a <main+0x68>
		{
			LCDSetPos(0,15);
 1fe:	6f e0       	ldi	r22, 0x0F	; 15
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	97 df       	rcall	.-210    	; 0x132 <LCDSetPos>
			LCDSendChar(c);
 204:	80 91 80 00 	lds	r24, 0x0080
 208:	b5 df       	rcall	.-150    	; 0x174 <LCDSendChar>
		}

		if (LEDFlag)
 20a:	80 91 83 00 	lds	r24, 0x0083
 20e:	90 91 84 00 	lds	r25, 0x0084
 212:	89 2b       	or	r24, r25
 214:	39 f0       	breq	.+14     	; 0x224 <main+0x82>
		{
			PORTD ^= 1<<PORTD7;
 216:	82 b3       	in	r24, 0x12	; 18
 218:	80 58       	subi	r24, 0x80	; 128
 21a:	82 bb       	out	0x12, r24	; 18
			LEDFlag = 0;
 21c:	10 92 84 00 	sts	0x0084, r1
 220:	10 92 83 00 	sts	0x0083, r1
		}
		
		
		if (enterflag == ON){
 224:	80 91 79 00 	lds	r24, 0x0079
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	19 f4       	brne	.+6      	; 0x232 <main+0x90>
			serialSendText("ENTER\n\r");
 22c:	80 e6       	ldi	r24, 0x60	; 96
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	b6 d0       	rcall	.+364    	; 0x39e <serialSendText>
		}
		enterflag = OFF;
 232:	10 92 79 00 	sts	0x0079, r1
				
		if (cancelflag == ON){
 236:	80 91 78 00 	lds	r24, 0x0078
 23a:	81 30       	cpi	r24, 0x01	; 1
 23c:	19 f4       	brne	.+6      	; 0x244 <main+0xa2>
			serialSendText("CANCEL\n\r");
 23e:	88 e6       	ldi	r24, 0x68	; 104
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	ad d0       	rcall	.+346    	; 0x39e <serialSendText>
		}
		cancelflag = OFF;
 244:	10 92 78 00 	sts	0x0078, r1
		
		serialSendText("IDLE\n\r");
 248:	81 e7       	ldi	r24, 0x71	; 113
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	a8 d0       	rcall	.+336    	; 0x39e <serialSendText>
		//handleMenu();
	}
 24e:	c8 cf       	rjmp	.-112    	; 0x1e0 <main+0x3e>

00000250 <__vector_7>:
}

ISR(TIMER1_COMPA_vect)
{
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	2f 93       	push	r18
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
	
	LEDCnt++;
 260:	80 91 81 00 	lds	r24, 0x0081
 264:	90 91 82 00 	lds	r25, 0x0082
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	90 93 82 00 	sts	0x0082, r25
 26e:	80 93 81 00 	sts	0x0081, r24
	if (LEDCnt >= 500)
 272:	80 91 81 00 	lds	r24, 0x0081
 276:	90 91 82 00 	lds	r25, 0x0082
 27a:	84 3f       	cpi	r24, 0xF4	; 244
 27c:	91 40       	sbci	r25, 0x01	; 1
 27e:	54 f0       	brlt	.+20     	; 0x294 <__vector_7+0x44>
	{
		LEDFlag = 1;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	90 93 84 00 	sts	0x0084, r25
 288:	80 93 83 00 	sts	0x0083, r24
		LEDCnt = 0;
 28c:	10 92 82 00 	sts	0x0082, r1
 290:	10 92 81 00 	sts	0x0081, r1
	}

	// Enter button flag handling
	if (bit_is_clear(PINB, 0)){
 294:	b0 99       	sbic	0x16, 0	; 22
 296:	13 c0       	rjmp	.+38     	; 0x2be <__vector_7+0x6e>
		enterCnt++;
 298:	80 91 87 00 	lds	r24, 0x0087
 29c:	90 91 88 00 	lds	r25, 0x0088
 2a0:	01 96       	adiw	r24, 0x01	; 1
 2a2:	90 93 88 00 	sts	0x0088, r25
 2a6:	80 93 87 00 	sts	0x0087, r24
		if (enterCnt >= 20)
 2aa:	80 91 87 00 	lds	r24, 0x0087
 2ae:	90 91 88 00 	lds	r25, 0x0088
 2b2:	44 97       	sbiw	r24, 0x14	; 20
 2b4:	54 f0       	brlt	.+20     	; 0x2ca <__vector_7+0x7a>
			enterbutton = 1;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	80 93 7d 00 	sts	0x007D, r24
 2bc:	06 c0       	rjmp	.+12     	; 0x2ca <__vector_7+0x7a>
	}
	else{
		enterbutton = 0;
 2be:	10 92 7d 00 	sts	0x007D, r1
		enterCnt = 0;
 2c2:	10 92 88 00 	sts	0x0088, r1
 2c6:	10 92 87 00 	sts	0x0087, r1
	}
	
	if ((preventerbutton == 0) & (enterbutton == 1)){
 2ca:	20 91 7c 00 	lds	r18, 0x007C
 2ce:	90 91 7d 00 	lds	r25, 0x007D
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	91 30       	cpi	r25, 0x01	; 1
 2d6:	09 f0       	breq	.+2      	; 0x2da <__vector_7+0x8a>
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	88 23       	and	r24, r24
 2dc:	41 f0       	breq	.+16     	; 0x2ee <__vector_7+0x9e>
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	21 11       	cpse	r18, r1
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	88 23       	and	r24, r24
 2e6:	19 f0       	breq	.+6      	; 0x2ee <__vector_7+0x9e>
		enterflag = ON;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	80 93 79 00 	sts	0x0079, r24
	}
	preventerbutton = enterbutton;
 2ee:	80 91 7d 00 	lds	r24, 0x007D
 2f2:	80 93 7c 00 	sts	0x007C, r24
	

	// Cancel button flag handling
	if (bit_is_clear(PINB, 1)){
 2f6:	b1 99       	sbic	0x16, 1	; 22
 2f8:	13 c0       	rjmp	.+38     	; 0x320 <__vector_7+0xd0>
		cancelCnt++;
 2fa:	80 91 85 00 	lds	r24, 0x0085
 2fe:	90 91 86 00 	lds	r25, 0x0086
 302:	01 96       	adiw	r24, 0x01	; 1
 304:	90 93 86 00 	sts	0x0086, r25
 308:	80 93 85 00 	sts	0x0085, r24
		if (cancelCnt >= 20)
 30c:	80 91 85 00 	lds	r24, 0x0085
 310:	90 91 86 00 	lds	r25, 0x0086
 314:	44 97       	sbiw	r24, 0x14	; 20
 316:	54 f0       	brlt	.+20     	; 0x32c <__vector_7+0xdc>
		cancelbutton = 1;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	80 93 7b 00 	sts	0x007B, r24
 31e:	06 c0       	rjmp	.+12     	; 0x32c <__vector_7+0xdc>
	}
	else{
		cancelbutton = 0;
 320:	10 92 7b 00 	sts	0x007B, r1
		cancelCnt = 0;
 324:	10 92 86 00 	sts	0x0086, r1
 328:	10 92 85 00 	sts	0x0085, r1
	}
	
	if ((prevcancelbutton == 0) & (cancelbutton == 1)){
 32c:	20 91 7a 00 	lds	r18, 0x007A
 330:	90 91 7b 00 	lds	r25, 0x007B
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	91 30       	cpi	r25, 0x01	; 1
 338:	09 f0       	breq	.+2      	; 0x33c <__vector_7+0xec>
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	88 23       	and	r24, r24
 33e:	41 f0       	breq	.+16     	; 0x350 <__vector_7+0x100>
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	21 11       	cpse	r18, r1
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	88 23       	and	r24, r24
 348:	19 f0       	breq	.+6      	; 0x350 <__vector_7+0x100>
		cancelflag = ON;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	80 93 78 00 	sts	0x0078, r24
	}
	prevcancelbutton = cancelbutton;
 350:	80 91 7b 00 	lds	r24, 0x007B
 354:	80 93 7a 00 	sts	0x007A, r24
			dnCnt--;
		}
	}
	*/

}
 358:	9f 91       	pop	r25
 35a:	8f 91       	pop	r24
 35c:	2f 91       	pop	r18
 35e:	0f 90       	pop	r0
 360:	0f be       	out	0x3f, r0	; 63
 362:	0f 90       	pop	r0
 364:	1f 90       	pop	r1
 366:	18 95       	reti

00000368 <__vector_13>:

ISR(USART_RXC_vect)
{
 368:	1f 92       	push	r1
 36a:	0f 92       	push	r0
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	0f 92       	push	r0
 370:	11 24       	eor	r1, r1
 372:	8f 93       	push	r24
 374:	9f 93       	push	r25
	c = UDR;
 376:	8c b1       	in	r24, 0x0c	; 12
 378:	80 93 80 00 	sts	0x0080, r24
	rxflag = 1;;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	90 93 7f 00 	sts	0x007F, r25
 384:	80 93 7e 00 	sts	0x007E, r24
}
 388:	9f 91       	pop	r25
 38a:	8f 91       	pop	r24
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <serialSendChar>:
#include <avr/io.h>
#include "serial.h"

void serialSendChar(unsigned char c)
{
	while (!(UCSRA & (1<<UDRE))); // Wait for serial TX to be ready
 396:	5d 9b       	sbis	0x0b, 5	; 11
 398:	fe cf       	rjmp	.-4      	; 0x396 <serialSendChar>
	UDR = c;
 39a:	8c b9       	out	0x0c, r24	; 12
 39c:	08 95       	ret

0000039e <serialSendText>:
}
void serialSendText(char *text)
{
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	ec 01       	movw	r28, r24
	while (*text > 0)
 3a4:	88 81       	ld	r24, Y
 3a6:	18 16       	cp	r1, r24
 3a8:	2c f4       	brge	.+10     	; 0x3b4 <serialSendText+0x16>
 3aa:	21 96       	adiw	r28, 0x01	; 1
	{
		serialSendChar(*text++);
 3ac:	f4 df       	rcall	.-24     	; 0x396 <serialSendChar>
	while (!(UCSRA & (1<<UDRE))); // Wait for serial TX to be ready
	UDR = c;
}
void serialSendText(char *text)
{
	while (*text > 0)
 3ae:	89 91       	ld	r24, Y+
 3b0:	18 16       	cp	r1, r24
 3b2:	e4 f3       	brlt	.-8      	; 0x3ac <serialSendText+0xe>
	{
		serialSendChar(*text++);
	}
}
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <_exit>:
 3ba:	f8 94       	cli

000003bc <__stop_program>:
 3bc:	ff cf       	rjmp	.-2      	; 0x3bc <__stop_program>
