
Intervalometer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000456  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  00000456  000004ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008000ca  008000ca  00000554  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000804  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000273  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008e5  00000000  00000000  00001073  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001958  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000063c8  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000229  00000000  00000000  00007e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00008049  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000229f  00000000  00000000  000080a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c1       	rjmp	.+640    	; 0x29e <__vector_7>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3c       	cpi	r26, 0xCA	; 202
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa ec       	ldi	r26, 0xCA	; 202
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3d       	cpi	r26, 0xDE	; 222
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	9b d0       	rcall	.+310    	; 0x1be <main>
  88:	e4 c1       	rjmp	.+968    	; 0x452 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <LCDToggleEnable>:
	_delay_us(50);
}

void LCDToggleEnable()
{
	LCDCONTROL |= 1<<ENABLE;
  8c:	95 9a       	sbi	0x12, 5	; 18
	...
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
  96:	00 00       	nop
	LCDCONTROL &= ~(1<<ENABLE);
  98:	95 98       	cbi	0x12, 5	; 18
  9a:	08 95       	ret

0000009c <LCDWaitWhileBusy>:
	_delay_us(50);
}

void LCDWaitWhileBusy()
{
	LCDDATADIR = 0;
  9c:	14 ba       	out	0x14, r1	; 20
	LCDCONTROL |= 1<<READWRITE;
  9e:	92 9a       	sbi	0x12, 2	; 18
	LCDCONTROL &= ~(1<<REGSEL);
  a0:	96 98       	cbi	0x12, 6	; 18

	while(LCDDATA >= 0x80)
  a2:	af 9b       	sbis	0x15, 7	; 21
  a4:	03 c0       	rjmp	.+6      	; 0xac <LCDWaitWhileBusy+0x10>
	{
		LCDToggleEnable();
  a6:	f2 df       	rcall	.-28     	; 0x8c <LCDToggleEnable>
{
	LCDDATADIR = 0;
	LCDCONTROL |= 1<<READWRITE;
	LCDCONTROL &= ~(1<<REGSEL);

	while(LCDDATA >= 0x80)
  a8:	af 99       	sbic	0x15, 7	; 21
  aa:	fd cf       	rjmp	.-6      	; 0xa6 <LCDWaitWhileBusy+0xa>
	{
		LCDToggleEnable();
	}
	LCDDATADIR = 0xff;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	84 bb       	out	0x14, r24	; 20
	LCDCONTROL &= ~(1<<READWRITE);
  b0:	92 98       	cbi	0x12, 2	; 18
  b2:	08 95       	ret

000000b4 <LCDSendCommand>:
	LCDSendCommand(0b00001110); // Display ON/OFF
	_delay_us(50);
}

void LCDSendCommand(unsigned char command)
{
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
	LCDWaitWhileBusy();
  b8:	f1 df       	rcall	.-30     	; 0x9c <LCDWaitWhileBusy>
	LCDCONTROL &= ~(1<<REGSEL);
  ba:	96 98       	cbi	0x12, 6	; 18
	asm volatile ("nop");
  bc:	00 00       	nop
	asm volatile ("nop");
  be:	00 00       	nop
	LCDDATA = command;
  c0:	c5 bb       	out	0x15, r28	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	87 ec       	ldi	r24, 0xC7	; 199
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <LCDSendCommand+0x12>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <LCDSendCommand+0x18>
  cc:	00 00       	nop
	_delay_us(50);
	LCDToggleEnable();
  ce:	de df       	rcall	.-68     	; 0x8c <LCDToggleEnable>
	LCDDATA = 0;
  d0:	15 ba       	out	0x15, r1	; 21
  d2:	87 ec       	ldi	r24, 0xC7	; 199
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <LCDSendCommand+0x22>
  da:	00 c0       	rjmp	.+0      	; 0xdc <LCDSendCommand+0x28>
  dc:	00 00       	nop
	_delay_us(50);
}
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <LCDInit>:
#define ENABLE PORTD5 // LCD Enable.
#define REGSEL PORTD6 // LCD Register select. 0 = command

void LCDInit()
{	// Configure LCD
	LCDDATADIR = 0xFF;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	84 bb       	out	0x14, r24	; 20
	LCDCONTROLDIR |= (1<<ENABLE | 1<<REGSEL | 1<<READWRITE);
  e6:	81 b3       	in	r24, 0x11	; 17
  e8:	84 66       	ori	r24, 0x64	; 100
  ea:	81 bb       	out	0x11, r24	; 17
	LCDCONTROL &= ~(1<<READWRITE);
  ec:	92 98       	cbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	80 e7       	ldi	r24, 0x70	; 112
  f2:	92 e0       	ldi	r25, 0x02	; 2
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <LCDInit+0x12>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCDInit+0x1c>
  fe:	00 00       	nop
	_delay_ms(50);
	LCDSendCommand(0x1);  // Home
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	d8 df       	rcall	.-80     	; 0xb4 <LCDSendCommand>
 104:	8f e3       	ldi	r24, 0x3F	; 63
 106:	9f e1       	ldi	r25, 0x1F	; 31
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCDInit+0x26>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCDInit+0x2c>
 10e:	00 00       	nop
	_delay_ms(2);
	LCDSendCommand(0x38); // 8-bit commands
 110:	88 e3       	ldi	r24, 0x38	; 56
 112:	d0 df       	rcall	.-96     	; 0xb4 <LCDSendCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	87 ec       	ldi	r24, 0xC7	; 199
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCDInit+0x36>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <LCDInit+0x3c>
 11e:	00 00       	nop
	_delay_us(50);
	LCDSendCommand(0b00001110); // Display ON/OFF
 120:	8e e0       	ldi	r24, 0x0E	; 14
 122:	c8 df       	rcall	.-112    	; 0xb4 <LCDSendCommand>
 124:	87 ec       	ldi	r24, 0xC7	; 199
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCDInit+0x46>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <LCDInit+0x4c>
 12e:	00 00       	nop
 130:	08 95       	ret

00000132 <LCDSetPos>:
		LCDSendChar(*text++);
	}
}

void LCDSetPos(unsigned char row, unsigned char col)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	00 d0       	rcall	.+0      	; 0x138 <LCDSetPos+0x6>
 138:	00 d0       	rcall	.+0      	; 0x13a <LCDSetPos+0x8>
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
	unsigned char rowaddr[] = {0, 64, 20, 84};
 13e:	19 82       	std	Y+1, r1	; 0x01
 140:	90 e4       	ldi	r25, 0x40	; 64
 142:	9a 83       	std	Y+2, r25	; 0x02
 144:	94 e1       	ldi	r25, 0x14	; 20
 146:	9b 83       	std	Y+3, r25	; 0x03
 148:	94 e5       	ldi	r25, 0x54	; 84
 14a:	9c 83       	std	Y+4, r25	; 0x04
	int pos = rowaddr[row] + col;
 14c:	fe 01       	movw	r30, r28
 14e:	e8 0f       	add	r30, r24
 150:	f1 1d       	adc	r31, r1
 152:	81 81       	ldd	r24, Z+1	; 0x01
 154:	86 0f       	add	r24, r22
	LCDSendCommand(0x80 + pos);
 156:	80 58       	subi	r24, 0x80	; 128
 158:	ad df       	rcall	.-166    	; 0xb4 <LCDSendCommand>
 15a:	87 ec       	ldi	r24, 0xC7	; 199
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <LCDSetPos+0x2c>
 162:	00 c0       	rjmp	.+0      	; 0x164 <LCDSetPos+0x32>
 164:	00 00       	nop
	_delay_us(50);
}
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <LCDSendChar>:
	LCDDATA = 0;
	_delay_us(50);
}

void LCDSendChar(unsigned char character)
{
 174:	cf 93       	push	r28
 176:	c8 2f       	mov	r28, r24
	LCDWaitWhileBusy();
 178:	91 df       	rcall	.-222    	; 0x9c <LCDWaitWhileBusy>
	LCDCONTROL |= 1<<REGSEL;
 17a:	96 9a       	sbi	0x12, 6	; 18
	asm volatile ("nop");
 17c:	00 00       	nop
	asm volatile ("nop");
 17e:	00 00       	nop
	LCDDATA = character;
 180:	c5 bb       	out	0x15, r28	; 21
 182:	87 ec       	ldi	r24, 0xC7	; 199
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCDSendChar+0x12>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCDSendChar+0x18>
 18c:	00 00       	nop
	_delay_us(50);
	LCDToggleEnable();
 18e:	7e df       	rcall	.-260    	; 0x8c <LCDToggleEnable>
	LCDDATA = 0;
 190:	15 ba       	out	0x15, r1	; 21
 192:	87 ec       	ldi	r24, 0xC7	; 199
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <LCDSendChar+0x22>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <LCDSendChar+0x28>
 19c:	00 00       	nop
	_delay_us(50);
}
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <LCDSendText>:
	asm volatile ("nop");
	LCDCONTROL &= ~(1<<ENABLE);
}

void LCDSendText(char *text)
{
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	ec 01       	movw	r28, r24
	while (*text > 0)
 1a8:	88 81       	ld	r24, Y
 1aa:	18 16       	cp	r1, r24
 1ac:	2c f4       	brge	.+10     	; 0x1b8 <LCDSendText+0x16>
 1ae:	21 96       	adiw	r28, 0x01	; 1
	{
		LCDSendChar(*text++);
 1b0:	e1 df       	rcall	.-62     	; 0x174 <LCDSendChar>
	LCDCONTROL &= ~(1<<ENABLE);
}

void LCDSendText(char *text)
{
	while (*text > 0)
 1b2:	89 91       	ld	r24, Y+
 1b4:	18 16       	cp	r1, r24
 1b6:	e4 f3       	brlt	.-8      	; 0x1b0 <LCDSendText+0xe>
	{
		LCDSendChar(*text++);
	}
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	08 95       	ret

000001be <main>:
volatile int LEDCnt = 0;


int main(void)
{
	MCUCSR = (1<<JTD); // Disable JTAG
 1be:	80 e8       	ldi	r24, 0x80	; 128
 1c0:	84 bf       	out	0x34, r24	; 52
	MCUCSR = (1<<JTD); // Disable JTAG (yes, 2 are required)
 1c2:	84 bf       	out	0x34, r24	; 52

	// Set up buttons
	BUTTON_DIR &= ~(1<<ENTER | 1<<CANCEL | 1<<UP | 1<<DN);
 1c4:	87 b3       	in	r24, 0x17	; 23
 1c6:	80 7f       	andi	r24, 0xF0	; 240
 1c8:	87 bb       	out	0x17, r24	; 23
	PORTB |= 0xF; // Configure ports 0-3 as inputs with pull-ups
 1ca:	88 b3       	in	r24, 0x18	; 24
 1cc:	8f 60       	ori	r24, 0x0F	; 15
 1ce:	88 bb       	out	0x18, r24	; 24

	// Timer interrupt, 1mS
	TCCR1B |= (1<<CS11) | (1<<CS10) | (1<<WGM12);
 1d0:	8e b5       	in	r24, 0x2e	; 46
 1d2:	8b 60       	ori	r24, 0x0B	; 11
 1d4:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 250; // 1000Hz (1mS) with div by 64
 1d6:	8a ef       	ldi	r24, 0xFA	; 250
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	9b bd       	out	0x2b, r25	; 43
 1dc:	8a bd       	out	0x2a, r24	; 42
	TIMSK |= 1<<OCIE1A;
 1de:	89 b7       	in	r24, 0x39	; 57
 1e0:	80 61       	ori	r24, 0x10	; 16
 1e2:	89 bf       	out	0x39, r24	; 57
	sei();
 1e4:	78 94       	sei

	DDRD |= 1<<PIND7;
 1e6:	8f 9a       	sbi	0x11, 7	; 17
	LCDInit();
 1e8:	7c df       	rcall	.-264    	; 0xe2 <LCDInit>
	//LCDSetPos(2,0);
	//LCDSendText("Enter to continue");

	while(1)
	{
		if (LEDFlag)
 1ea:	80 91 cc 00 	lds	r24, 0x00CC
 1ee:	90 91 cd 00 	lds	r25, 0x00CD
 1f2:	89 2b       	or	r24, r25
 1f4:	39 f0       	breq	.+14     	; 0x204 <main+0x46>
		{
			PORTD ^= 1<<PORTD7;
 1f6:	82 b3       	in	r24, 0x12	; 18
 1f8:	80 58       	subi	r24, 0x80	; 128
 1fa:	82 bb       	out	0x12, r24	; 18
			LEDFlag = 0;
 1fc:	10 92 cd 00 	sts	0x00CD, r1
 200:	10 92 cc 00 	sts	0x00CC, r1
		}
		
		// Enter button
		if (enterFlag)
 204:	80 91 d4 00 	lds	r24, 0x00D4
 208:	90 91 d5 00 	lds	r25, 0x00D5
 20c:	89 2b       	or	r24, r25
 20e:	39 f0       	breq	.+14     	; 0x21e <main+0x60>
		{
			LCDSetPos(0,0);
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	8e df       	rcall	.-228    	; 0x132 <LCDSetPos>
			LCDSendText("Enter TRUE     ");
 216:	80 e6       	ldi	r24, 0x60	; 96
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	c3 df       	rcall	.-122    	; 0x1a2 <LCDSendText>
 21c:	06 c0       	rjmp	.+12     	; 0x22a <main+0x6c>
		}
		else
		{
			LCDSetPos(0,0);
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	87 df       	rcall	.-242    	; 0x132 <LCDSetPos>
			LCDSendText("Enter FALSE");
 224:	80 e7       	ldi	r24, 0x70	; 112
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	bc df       	rcall	.-136    	; 0x1a2 <LCDSendText>
		}
		
		// Cancel button
		if (cancelFlag)
 22a:	80 91 d2 00 	lds	r24, 0x00D2
 22e:	90 91 d3 00 	lds	r25, 0x00D3
 232:	89 2b       	or	r24, r25
 234:	39 f0       	breq	.+14     	; 0x244 <main+0x86>
		{
			LCDSetPos(1,0);
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	7b df       	rcall	.-266    	; 0x132 <LCDSetPos>
			LCDSendText("Cancel TRUE     ");
 23c:	8c e7       	ldi	r24, 0x7C	; 124
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	b0 df       	rcall	.-160    	; 0x1a2 <LCDSendText>
 242:	06 c0       	rjmp	.+12     	; 0x250 <main+0x92>
		}
		else
		{
			LCDSetPos(1,0);
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	74 df       	rcall	.-280    	; 0x132 <LCDSetPos>
			LCDSendText("Cancel FALSE");
 24a:	8d e8       	ldi	r24, 0x8D	; 141
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	a9 df       	rcall	.-174    	; 0x1a2 <LCDSendText>
		}
		
		// UP flag
		if (upFlag)
 250:	80 91 d0 00 	lds	r24, 0x00D0
 254:	90 91 d1 00 	lds	r25, 0x00D1
 258:	89 2b       	or	r24, r25
 25a:	39 f0       	breq	.+14     	; 0x26a <main+0xac>
		{
			LCDSetPos(2,0);
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	82 e0       	ldi	r24, 0x02	; 2
 260:	68 df       	rcall	.-304    	; 0x132 <LCDSetPos>
			LCDSendText("UP TRUE     ");
 262:	8a e9       	ldi	r24, 0x9A	; 154
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	9d df       	rcall	.-198    	; 0x1a2 <LCDSendText>
 268:	06 c0       	rjmp	.+12     	; 0x276 <main+0xb8>
		}
		else
		{
			LCDSetPos(2,0);
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	61 df       	rcall	.-318    	; 0x132 <LCDSetPos>
			LCDSendText("UP FALSE");
 270:	87 ea       	ldi	r24, 0xA7	; 167
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	96 df       	rcall	.-212    	; 0x1a2 <LCDSendText>
		}
		
		// DOWN flag
		if (dnFlag)
 276:	80 91 ce 00 	lds	r24, 0x00CE
 27a:	90 91 cf 00 	lds	r25, 0x00CF
 27e:	89 2b       	or	r24, r25
 280:	39 f0       	breq	.+14     	; 0x290 <main+0xd2>
		{
			LCDSetPos(3,0);
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	83 e0       	ldi	r24, 0x03	; 3
 286:	55 df       	rcall	.-342    	; 0x132 <LCDSetPos>
			LCDSendText("DOWN TRUE     ");
 288:	80 eb       	ldi	r24, 0xB0	; 176
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	8a df       	rcall	.-236    	; 0x1a2 <LCDSendText>
 28e:	ad cf       	rjmp	.-166    	; 0x1ea <main+0x2c>
		}
		else
		{
			LCDSetPos(3,0);
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	83 e0       	ldi	r24, 0x03	; 3
 294:	4e df       	rcall	.-356    	; 0x132 <LCDSetPos>
			LCDSendText("DOWN FALSE");
 296:	8f eb       	ldi	r24, 0xBF	; 191
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	83 df       	rcall	.-250    	; 0x1a2 <LCDSendText>
 29c:	a6 cf       	rjmp	.-180    	; 0x1ea <main+0x2c>

0000029e <__vector_7>:

	}
}

ISR(TIMER1_COMPA_vect)
{
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
 2a8:	2f 93       	push	r18
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
	LEDCnt++;
 2ae:	80 91 ca 00 	lds	r24, 0x00CA
 2b2:	90 91 cb 00 	lds	r25, 0x00CB
 2b6:	01 96       	adiw	r24, 0x01	; 1
 2b8:	90 93 cb 00 	sts	0x00CB, r25
 2bc:	80 93 ca 00 	sts	0x00CA, r24
	if (LEDCnt >= 500)
 2c0:	80 91 ca 00 	lds	r24, 0x00CA
 2c4:	90 91 cb 00 	lds	r25, 0x00CB
 2c8:	84 3f       	cpi	r24, 0xF4	; 244
 2ca:	91 40       	sbci	r25, 0x01	; 1
 2cc:	54 f0       	brlt	.+20     	; 0x2e2 <__vector_7+0x44>
	{
		LEDFlag = 1;
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	90 93 cd 00 	sts	0x00CD, r25
 2d6:	80 93 cc 00 	sts	0x00CC, r24
		LEDCnt = 0;
 2da:	10 92 cb 00 	sts	0x00CB, r1
 2de:	10 92 ca 00 	sts	0x00CA, r1
	}
	
	// Enter button flag handling
	if (bit_is_clear(PINB, 0))
 2e2:	b0 99       	sbic	0x16, 0	; 22
 2e4:	16 c0       	rjmp	.+44     	; 0x312 <__vector_7+0x74>
	{
		enterCnt++;
 2e6:	80 91 dc 00 	lds	r24, 0x00DC
 2ea:	90 91 dd 00 	lds	r25, 0x00DD
 2ee:	01 96       	adiw	r24, 0x01	; 1
 2f0:	90 93 dd 00 	sts	0x00DD, r25
 2f4:	80 93 dc 00 	sts	0x00DC, r24
		if (enterCnt >= 20)
 2f8:	80 91 dc 00 	lds	r24, 0x00DC
 2fc:	90 91 dd 00 	lds	r25, 0x00DD
 300:	44 97       	sbiw	r24, 0x14	; 20
 302:	dc f0       	brlt	.+54     	; 0x33a <__vector_7+0x9c>
		{
			enterFlag = 1;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	90 93 d5 00 	sts	0x00D5, r25
 30c:	80 93 d4 00 	sts	0x00D4, r24
 310:	14 c0       	rjmp	.+40     	; 0x33a <__vector_7+0x9c>
		}
	}
	else
	{
		enterFlag = 0;
 312:	10 92 d5 00 	sts	0x00D5, r1
 316:	10 92 d4 00 	sts	0x00D4, r1
		if (enterCnt > 0)
 31a:	80 91 dc 00 	lds	r24, 0x00DC
 31e:	90 91 dd 00 	lds	r25, 0x00DD
 322:	18 16       	cp	r1, r24
 324:	19 06       	cpc	r1, r25
 326:	4c f4       	brge	.+18     	; 0x33a <__vector_7+0x9c>
		{
			enterCnt--;
 328:	80 91 dc 00 	lds	r24, 0x00DC
 32c:	90 91 dd 00 	lds	r25, 0x00DD
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	90 93 dd 00 	sts	0x00DD, r25
 336:	80 93 dc 00 	sts	0x00DC, r24
		}
	}

	// Cancel button flag handling
	if (bit_is_clear(PINB, 1))
 33a:	b1 99       	sbic	0x16, 1	; 22
 33c:	16 c0       	rjmp	.+44     	; 0x36a <__vector_7+0xcc>
	{
		cancelCnt++;
 33e:	80 91 da 00 	lds	r24, 0x00DA
 342:	90 91 db 00 	lds	r25, 0x00DB
 346:	01 96       	adiw	r24, 0x01	; 1
 348:	90 93 db 00 	sts	0x00DB, r25
 34c:	80 93 da 00 	sts	0x00DA, r24
		if (cancelCnt >= 20)
 350:	80 91 da 00 	lds	r24, 0x00DA
 354:	90 91 db 00 	lds	r25, 0x00DB
 358:	44 97       	sbiw	r24, 0x14	; 20
 35a:	dc f0       	brlt	.+54     	; 0x392 <__vector_7+0xf4>
		{
			cancelFlag = 1;
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	90 93 d3 00 	sts	0x00D3, r25
 364:	80 93 d2 00 	sts	0x00D2, r24
 368:	14 c0       	rjmp	.+40     	; 0x392 <__vector_7+0xf4>
		}
	}
	else
	{
		cancelFlag = 0;
 36a:	10 92 d3 00 	sts	0x00D3, r1
 36e:	10 92 d2 00 	sts	0x00D2, r1
		if (cancelCnt > 0)
 372:	80 91 da 00 	lds	r24, 0x00DA
 376:	90 91 db 00 	lds	r25, 0x00DB
 37a:	18 16       	cp	r1, r24
 37c:	19 06       	cpc	r1, r25
 37e:	4c f4       	brge	.+18     	; 0x392 <__vector_7+0xf4>
		{
			cancelCnt--;
 380:	80 91 da 00 	lds	r24, 0x00DA
 384:	90 91 db 00 	lds	r25, 0x00DB
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	90 93 db 00 	sts	0x00DB, r25
 38e:	80 93 da 00 	sts	0x00DA, r24
		}
	}

	if (bit_is_clear(PINB, 2))
 392:	b2 99       	sbic	0x16, 2	; 22
 394:	16 c0       	rjmp	.+44     	; 0x3c2 <__vector_7+0x124>
	{
		upCnt++;
 396:	80 91 d8 00 	lds	r24, 0x00D8
 39a:	90 91 d9 00 	lds	r25, 0x00D9
 39e:	01 96       	adiw	r24, 0x01	; 1
 3a0:	90 93 d9 00 	sts	0x00D9, r25
 3a4:	80 93 d8 00 	sts	0x00D8, r24
		if (upCnt >= 20)
 3a8:	80 91 d8 00 	lds	r24, 0x00D8
 3ac:	90 91 d9 00 	lds	r25, 0x00D9
 3b0:	44 97       	sbiw	r24, 0x14	; 20
 3b2:	dc f0       	brlt	.+54     	; 0x3ea <__vector_7+0x14c>
		{
			upFlag = 1;
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	90 93 d1 00 	sts	0x00D1, r25
 3bc:	80 93 d0 00 	sts	0x00D0, r24
 3c0:	14 c0       	rjmp	.+40     	; 0x3ea <__vector_7+0x14c>
		}
	}
	else
	{
		upFlag = 0;
 3c2:	10 92 d1 00 	sts	0x00D1, r1
 3c6:	10 92 d0 00 	sts	0x00D0, r1
		if (upCnt > 0)
 3ca:	80 91 d8 00 	lds	r24, 0x00D8
 3ce:	90 91 d9 00 	lds	r25, 0x00D9
 3d2:	18 16       	cp	r1, r24
 3d4:	19 06       	cpc	r1, r25
 3d6:	4c f4       	brge	.+18     	; 0x3ea <__vector_7+0x14c>
		{
			upCnt--;
 3d8:	80 91 d8 00 	lds	r24, 0x00D8
 3dc:	90 91 d9 00 	lds	r25, 0x00D9
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	90 93 d9 00 	sts	0x00D9, r25
 3e6:	80 93 d8 00 	sts	0x00D8, r24
		}
	}

	if (bit_is_clear(PINB, 3))
 3ea:	b3 99       	sbic	0x16, 3	; 22
 3ec:	16 c0       	rjmp	.+44     	; 0x41a <__vector_7+0x17c>
	{
		dnCnt++;
 3ee:	80 91 d6 00 	lds	r24, 0x00D6
 3f2:	90 91 d7 00 	lds	r25, 0x00D7
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	90 93 d7 00 	sts	0x00D7, r25
 3fc:	80 93 d6 00 	sts	0x00D6, r24
		if (dnCnt >= 20)
 400:	80 91 d6 00 	lds	r24, 0x00D6
 404:	90 91 d7 00 	lds	r25, 0x00D7
 408:	44 97       	sbiw	r24, 0x14	; 20
 40a:	dc f0       	brlt	.+54     	; 0x442 <__vector_7+0x1a4>
		{
			dnFlag = 1;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	90 93 cf 00 	sts	0x00CF, r25
 414:	80 93 ce 00 	sts	0x00CE, r24
 418:	14 c0       	rjmp	.+40     	; 0x442 <__vector_7+0x1a4>
		}
	}
	else
	{
		dnFlag = 0;
 41a:	10 92 cf 00 	sts	0x00CF, r1
 41e:	10 92 ce 00 	sts	0x00CE, r1
		if (dnCnt > 0)
 422:	80 91 d6 00 	lds	r24, 0x00D6
 426:	90 91 d7 00 	lds	r25, 0x00D7
 42a:	18 16       	cp	r1, r24
 42c:	19 06       	cpc	r1, r25
 42e:	4c f4       	brge	.+18     	; 0x442 <__vector_7+0x1a4>
		{
			dnCnt--;
 430:	80 91 d6 00 	lds	r24, 0x00D6
 434:	90 91 d7 00 	lds	r25, 0x00D7
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	90 93 d7 00 	sts	0x00D7, r25
 43e:	80 93 d6 00 	sts	0x00D6, r24
		}
	}

}
 442:	9f 91       	pop	r25
 444:	8f 91       	pop	r24
 446:	2f 91       	pop	r18
 448:	0f 90       	pop	r0
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	0f 90       	pop	r0
 44e:	1f 90       	pop	r1
 450:	18 95       	reti

00000452 <_exit>:
 452:	f8 94       	cli

00000454 <__stop_program>:
 454:	ff cf       	rjmp	.-2      	; 0x454 <__stop_program>
